package mx.home.biblioteca.dao;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.dbunit.DBTestCase;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.DataSetException;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.XmlDataSet;
import org.dbunit.operation.DatabaseOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AbstractDbUnitTestCase extends DBTestCase {

	protected void init() throws Exception {
		// try {
		handleSetUpOperation();
		// } catch (ClassNotFoundException e) {
		// LOG.error("ClassNotFoundException in init().", e);
		// throw e;
		// } catch (SQLException e) {
		// LOG.error("SQLException in init().", e);
		// throw e;
		// } catch (DatabaseUnitException e) {
		// LOG.error("DatabaseUnitException in init().", e);
		// throw e;
		// } catch (IOException e) {
		// LOG.error("IOException in init().", e);
		// throw e;
		// }
	}

	private void handleSetUpOperation() throws Exception {
		final IDataSet data = getDataSet();
		final IDatabaseConnection conn = getConnection();
		try {
			createTables();
			DatabaseOperation.CLEAN_INSERT.execute(conn, data);
			/*
			 * TODO no se estan creando las tablas requeridas en la BD de manera
			 * automatica, ni se estan llenando las tablas con los valores
			 * definidos en el XML!
			 */
		} finally {
			conn.close();
		}
	}

	@Override
	protected IDataSet getDataSet() throws IOException, DataSetException {
		final File dataSrcFile = new File("src/test/data/libroDataSet.xml");
		LOG.debug("Abs Path Data File: " + dataSrcFile.getAbsolutePath());
		return new XmlDataSet(new FileReader(dataSrcFile));
		// return new FlatXmlDataSetBuilder().build(new File(
		// "src/test/data/libroDataSet.xml"));
	}

	// protected IDatabaseConnection getConnection()
	// throws ClassNotFoundException, DatabaseUnitException {
	// Class.forName("com.mysql.jdbc.Driver");
	// return new DatabaseConnection(DriverManager.getConnection(
	// "jdbc:mysql://localhost/biblioteca", "root", "rootita"));
	// Class.forName("org.hsqldb.jdbcDriver");
	// return new DatabaseConnection(DriverManager.getConnection(
	// "jdbc:hsqldb:hsql://localhost/bibliodb", "sa", ""));
	// return new HsqldbConnection(connection, null);
	// }

	// private static void startDbServer() {
	// final String[] arg0 = new String[] { "-database.0", "file:mybibliodb",
	// "-dbname.0", "bibliodb" };
	// Server.main(arg0);
	// // new Server().;
	// }

	private static void createTables() throws SQLException {
		final Statement stmt = connection.createStatement(); // NOPMD
		try {
			// stmt.execute("CREATE TABLE users ( id INTEGER GENERATED BY
			// DEFAULT AS
			// IDENTITY(START WITH 1), username VARCHAR(10), first_name
			// VARCHAR(10),
			// last_name VARCHAR(10) )");
			stmt.execute("CREATE MEMORY TABLE LIBRO(TITULO VARCHAR(50),EDICION INTEGER)");
		} finally {
			close(stmt);
		}
	}

	@SuppressWarnings("unused")
	private static void close(final ResultSet resultSet, final Statement pstmt) {
		if (resultSet != null) {
			try {
				resultSet.close();
			} catch (SQLException e) {
				LOG.error("In close()", e);
			}
		}
		close(pstmt);
	}

	private static void close(final Statement stmt) {
		try {
			stmt.close();
		} catch (SQLException e) {
			LOG.error("In close()", e);
		}
	}

	private static final Logger LOG;
	private static Connection connection;

	static {
		LOG = LoggerFactory.getLogger(AbstractDbUnitTestCase.class);
		try {
			// startDbServer();
			Class.forName("org.hsqldb.jdbcDriver");
			connection = DriverManager
					.getConnection("jdbc:hsqldb:mem:bibliodb;shutdown=true");
		} catch (SQLException e) {
			LOG.error("In init static block", e);
		} catch (ClassNotFoundException e) {
			LOG.error("In init static block", e);
		}
	}

}
